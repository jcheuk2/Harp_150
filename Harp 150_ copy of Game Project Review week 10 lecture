{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1PXsSMQAqyoVOTrOohCFrRrni9VzreZEQ","timestamp":1710871047442}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Using the Random Module"],"metadata":{"id":"UsQA6tEP00IN"}},{"cell_type":"markdown","source":["Python's built-in random module offers lots of methods that are useful for building a game. All you have to do is import the module at the top of your code to get started."],"metadata":{"id":"ROKeNz7O1Csg"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"T8ipP_a80xcu"},"outputs":[],"source":["import random"]},{"cell_type":"markdown","source":["Next, let's use the randint() method. It takes two parameters, the starting number and the stopping number.\n","\n","Try running this code a few times to see the different numbers you can get."],"metadata":{"id":"IlVPz2xq1a-2"}},{"cell_type":"code","source":["number = random.randint(34, 55) # also D6,D10,D12,D20 dice-roll\n","print(number)"],"metadata":{"id":"N5hRJZ3O1ruH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666892209432,"user_tz":240,"elapsed":8,"user":{"displayName":"Bing Codes","userId":"17330647075205038069"}},"outputId":"3b412cfe-fdca-4a64-ef6c-838670e8d544"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["53\n"]}]},{"cell_type":"markdown","source":["There is also another useful method called choice(). This allows you to choose randomly an element from a data structure. For example, if you are building a rock, paper, scissors game, you can choose randomly from a list of options. It takes one argument -- the structure of your choosing. In the option below, we used a simple list.     "],"metadata":{"id":"qpTbl7wT2C-T"}},{"cell_type":"code","source":["option_list = [\"rock\", \"paper\", \"scissors\"]\n","player_a = random.choice(option_list)\n","\n","print(player_a)"],"metadata":{"id":"bdd9zLfa2NYA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666892312380,"user_tz":240,"elapsed":107,"user":{"displayName":"Bing Codes","userId":"17330647075205038069"}},"outputId":"82438aa8-7654-4322-89c8-69e8659bcb96"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["scissors\n"]}]},{"cell_type":"code","source":["events = [\"A cloaked stranger slides a cryptic note your way before vanishing into the crowd\",\n","          \"A drunk patron spills a drink on you, sparking a heated argument\",\n","          \"As you enjoy your drink, you spot a familiar face across the roomâ€”it's a long-lost friend you haven't seen in years\"]\n","random_event = random.choice(events)\n","\n","print(random_event)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bgo92tJLmn0A","executionInfo":{"status":"ok","timestamp":1698116721829,"user_tz":240,"elapsed":147,"user":{"displayName":"Chuning Xie","userId":"14173690412866571638"}},"outputId":"268589c8-6a20-4535-8405-8bc637a5219e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["A drunk patron spills a drink on you, sparking a heated argument\n"]}]},{"cell_type":"markdown","source":["You can also use this with a dictionary to either pull out a random key or the entire key, value pair."],"metadata":{"id":"K6ey4sl42y2F"}},{"cell_type":"code","source":["capitals = {\"Berlin\": \"Germany\", \"Buenos Aires\": \"Argentina\", \"Sofia\": \"Bulgaria\",\n","            \"Ottawa\": \"Canada\", \"Nairobi\": \"Kenya\", \"Rabat\": \"Morocco\", \"Moscow\": \"Russia\"}\n","\n","#Randomly choose a key-value pair\n","print(capitals.items())\n","print(list(capitals.items()))\n","capital,country = random.choice(list(capitals.items())) # tuple unpacking/multiple assignments\n","print(capital,country)\n","row = random.choice(list(capitals.items()))\n","print(row) # returns as a tuple\n","\n","#Randomly choose a key\n","key = random.choice(list(capitals.keys()))\n","print(key)\n","\n","#Randomly choose a value\n","value = random.choice(list(capitals.values()))\n","print(value)"],"metadata":{"id":"N_FjtWzh28a0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710451142064,"user_tz":240,"elapsed":179,"user":{"displayName":"Chuning Xie","userId":"14173690412866571638"}},"outputId":"1aec4646-22d6-469f-e3f9-3b8187591222"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["dict_items([('Berlin', 'Germany'), ('Buenos Aires', 'Argentina'), ('Sofia', 'Bulgaria'), ('Ottawa', 'Canada'), ('Nairobi', 'Kenya'), ('Rabat', 'Morocco'), ('Moscow', 'Russia')])\n","[('Berlin', 'Germany'), ('Buenos Aires', 'Argentina'), ('Sofia', 'Bulgaria'), ('Ottawa', 'Canada'), ('Nairobi', 'Kenya'), ('Rabat', 'Morocco'), ('Moscow', 'Russia')]\n","Rabat Morocco\n","('Moscow', 'Russia')\n","Ottawa\n","Morocco\n"]}]},{"cell_type":"markdown","source":["Maybe you want to shuffle a list of items or numbers, you can use the shuffle() method. Note that this changes the list in place, it doesn't create a new list."],"metadata":{"id":"NPEuNKZy4lVj"}},{"cell_type":"markdown","source":["Dr. Xie thinks w3 schools is a good source to learn about bython and methods."],"metadata":{"id":"BfEJcOqy3YPi"}},{"cell_type":"markdown","source":["https://www.w3schools.com/python/ref_random_shuffle.asp"],"metadata":{"id":"sLhVWPQf3v76"}},{"cell_type":"code","source":["list = [3, 5, 2, 1, 6, 4, 2, 11]\n","\n","random.shuffle(list)\n","print(list)"],"metadata":{"id":"cw8AQ3GP4tYI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710426190477,"user_tz":240,"elapsed":188,"user":{"displayName":"Chuning Xie","userId":"14173690412866571638"}},"outputId":"a63bbb6a-19b0-481e-c381-1b587248a8dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[4, 5, 11, 2, 1, 3, 6, 2]\n"]}]},{"cell_type":"code","source":["enemies = [\"Dragon\",\"Zombie\",\"Ghost\",\"Skeleton\"]\n","random.shuffle(enemies)\n","\n","print(\"The enemies approach in this order:\")\n","for i in enemies:\n","    print(i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bmAmTGkCmIQ_","executionInfo":{"status":"ok","timestamp":1710426185945,"user_tz":240,"elapsed":6,"user":{"displayName":"Chuning Xie","userId":"14173690412866571638"}},"outputId":"c5bc17d5-480e-430e-bf88-a8bdc0f30dbb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The enemies approach in this order:\n","Dragon\n","Ghost\n","Zombie\n","Skeleton\n"]}]},{"cell_type":"markdown","source":["You can pair random with conditionals to create a more diverse playing experience for users."],"metadata":{"id":"RWCCuc7-nGhH"}},{"cell_type":"markdown","source":["#Using the Time Module"],"metadata":{"id":"2_ogSCth5P1p"}},{"cell_type":"markdown","source":["Python also comes pre-installed with the time module. The most useful thing for our purposes is its sleep() method. This delays the execution of a program for a specified amount of time. The argument of the method is in seconds. Notice how the execution of the for loop is delayed below.\n","\n","sleep() can be especially useful in text-based games when you want the reader to be able to follow along with the text, rather than get a bunch of text simultaneously."],"metadata":{"id":"keCGatKY5RtJ"}},{"cell_type":"code","source":["import time"],"metadata":{"id":"KFMhc0mY5O07"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for x in range(1, 4):\n","  print(x)\n","  time.sleep(5)"],"metadata":{"id":"CVQHQ2JP5zI6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698115661395,"user_tz":240,"elapsed":15187,"user":{"displayName":"Chuning Xie","userId":"14173690412866571638"}},"outputId":"9785305b-7d1e-4b3b-df2d-88b3b4ffded1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","3\n"]}]},{"cell_type":"markdown","source":["We can also use sleep() to create a count-down timer to increase the thrill of the game."],"metadata":{"id":"UHeJfO_ZkW7L"}},{"cell_type":"code","source":["def countdown_timer(seconds):\n","    for i in range(seconds, 0, -1): # range(start,stop,step)\n","        print(f\"Time left: {i} seconds\")\n","        time.sleep(1)\n","\n","print(\"Get ready for the challenge!\")\n","countdown_timer(5)  # start a 5-second countdown"],"metadata":{"id":"TpvksErrkWUR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1710426373337,"user_tz":240,"elapsed":5006,"user":{"displayName":"Chuning Xie","userId":"14173690412866571638"}},"outputId":"4a898198-cc86-466a-db1b-87e8e6f77b9b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Get ready for the challenge!\n","Time left: 5 seconds\n","Time left: 4 seconds\n","Time left: 3 seconds\n","Time left: 2 seconds\n","Time left: 1 seconds\n"]}]},{"cell_type":"markdown","source":["Setting a time in the module"],"metadata":{"id":"i0CZ0j6D4_tL"}},{"cell_type":"markdown","source":["https://www.geeksforgeeks.org/how-to-set-an-input-time-limit-in-python/"],"metadata":{"id":"iYBI73_k49xe"}},{"cell_type":"markdown","source":["#Using while loops to run your game"],"metadata":{"id":"utnFFYcx61br"}},{"cell_type":"markdown","source":["We've already had some experience with this in our while loops lab, but you can use a while loop to act as the \"engine\" of your game. While a condition remains unmet, the game will continue to loop through.\n","\n","Here's an example of a simple guessing game using input() to get a number from a user.\n","\n","Notice how we are using booleans to run the program. It ceases to run when you change the value of the run variable on line 9. If you did not have that line, you would have an infinite loop!"],"metadata":{"id":"OslnSXMe64RD"}},{"cell_type":"code","source":["run = True\n","      # its going to be running no mbatter what\n","\n","while run == True:\n","  answer = int(input(\"What number am I thinking of? \"))\n","  if answer != 12:\n","    print(\"Wrong! Try again.\")\n","  else:\n","    print(\"Correct! You win!\")\n","    run = False\n","# you wont have to use break to stop the loop from running\n","#"],"metadata":{"id":"uqvDWzNEegbD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666893004992,"user_tz":240,"elapsed":7880,"user":{"displayName":"Bing Codes","userId":"17330647075205038069"}},"outputId":"d5386924-e6ec-4e16-d85e-0b280e465cc4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["What number am I thinking of? 11\n","Wrong! Try again.\n","What number am I thinking of? 445\n","Wrong! Try again.\n","What number am I thinking of? 12\n","Correct! You win!\n"]}]},{"cell_type":"markdown","source":["We can also code this program slightly different.\n","\n","Here we use the statement \"while True\" -- that basically tells the computer to loop forever. It's implicit, but what line 1 is actually saying is \"while True is True.\" We use a break statement on line 7 to make sure we do not have an infinite loop."],"metadata":{"id":"yhUdIW_hf46b"}},{"cell_type":"code","source":["while True:\n","  answer = int(input(\"What number am I thinking of? \"))\n","  if answer != 12:\n","    print(\"Wrong! Try again.\")\n","  else:\n","    print(\"Correct!\")\n","    break"],"metadata":{"id":"9dzXivUlf1tX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666893222968,"user_tz":240,"elapsed":2120,"user":{"displayName":"Bing Codes","userId":"17330647075205038069"}},"outputId":"3dffd4d6-8c51-4b8a-ee8c-6ac3d037bafa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["What number am I thinking of? 13\n","Wrong! Try again.\n"]}]},{"cell_type":"markdown","source":["You can also use a while loop to make sure a player still wants to play again."],"metadata":{"id":"lAPaBliZgkrj"}},{"cell_type":"code","source":["import random\n","\n","number = random.randint(1, 10)\n","play_again = \"y\"\n","\n","while play_again == \"y\":\n","  answer = int(input(\"What number am I thinking of? \"))\n","  if answer != number:\n","    print(\"Wrong! Try again.\")\n","  else:\n","    print(\"Correct! You win!\")\n","    play_again = input(\"Do you want to play again? (y/n): \").lower()\n","    number = random.randint(1, 10)"],"metadata":{"id":"ANwMS7DfgswD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666893563208,"user_tz":240,"elapsed":14288,"user":{"displayName":"Bing Codes","userId":"17330647075205038069"}},"outputId":"db918529-6eeb-4cf7-aca7-c106dbef3d4f"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["What number am I thinking of? 1\n","Wrong! Try again.\n","What number am I thinking of? 2\n","Wrong! Try again.\n","What number am I thinking of? 3\n","Wrong! Try again.\n","What number am I thinking of? 4\n","Correct! You win!\n","Do you want to play again? (y/n):  y\n"]}]},{"cell_type":"markdown","source":["You can also use a while loop to limit how many tries someone gets in a game."],"metadata":{"id":"wq63Tz25h0RI"}},{"cell_type":"code","source":["import random\n","\n","tries = 3\n","number = random.randint(1,10)\n","\n","while tries != 0:\n","  answer = int(input(\"What number am I thinking of 1-10? \"))\n","  if answer != number:\n","    tries -= 1\n","    print(f\"Wrong! Try again. You have {tries} tries left.\")\n","  else:\n","    print(\"Correct! You win!\")\n","    break"],"metadata":{"id":"LZQMKOp4h3cx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666894320207,"user_tz":240,"elapsed":4203,"user":{"displayName":"Bing Codes","userId":"17330647075205038069"}},"outputId":"d6c286b2-7c0a-4142-c23c-2fd812ac7d4f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["What number am I thinking of 1-10? 3\n","Wrong! Try again. You have 2 tries left.\n","What number am I thinking of 1-10? 5\n","Wrong! Try again. You have 1 tries left.\n","What number am I thinking of 1-10? 7\n","Correct! You win!\n"]}]},{"cell_type":"code","source":["while 1:\n","  answer = int(input(\"What number am I thinking of? \"))\n","  if answer != 12:\n","    print(\"Wrong! Try again.\")\n","  else:\n","    print(\"Correct!\")\n","    break\n","\n","## if you use 1 instead of true, 1= true while 0 = false. you can use that to"],"metadata":{"id":"6huUjWW659wV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"dMR3qBeQ59dM"}},{"cell_type":"markdown","source":["Of course, we can use for loops too! For example, we can limit how many rounds our game runs."],"metadata":{"id":"H25ktbAUqJe_"}},{"cell_type":"code","source":["for i in range(10):\n","  pass\n","\n","print(\"Game Over!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mkCfo3RQqHWV","executionInfo":{"status":"ok","timestamp":1698117433191,"user_tz":240,"elapsed":140,"user":{"displayName":"Chuning Xie","userId":"14173690412866571638"}},"outputId":"f9a934fe-eb6f-4e2a-9fb6-557adb74026d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Game Over!\n"]}]},{"cell_type":"code","source":["rounds = 10\n","for i in range(rounds):\n","  pass\n","\n","print(\"Game Over!\")\n","\n","# can create a range of ronds available"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vF89hMVw6zNB","executionInfo":{"status":"ok","timestamp":1710872048772,"user_tz":240,"elapsed":120,"user":{"displayName":"Joshua Cheuk","userId":"09800220979386665615"}},"outputId":"e84f0814-47fe-40fe-c96e-9d90dfffb2f0"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Game Over!\n"]}]},{"cell_type":"markdown","source":["We can also build a turn-based combat game using for loops."],"metadata":{"id":"wPFOCBTbq2HZ"}},{"cell_type":"code","source":["player_hp = 100\n","enemy_hp = 80\n","for turn in range(1, 6):  # 5 turns of combat\n","    print(f\"Turn {turn}:\")\n","    # Implement combat logic here\n","    # Update player_health and enemy_health"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TXo2lbAaribe","executionInfo":{"status":"ok","timestamp":1710426463002,"user_tz":240,"elapsed":150,"user":{"displayName":"Chuning Xie","userId":"14173690412866571638"}},"outputId":"e64c63ad-e210-4894-f364-f0468ec7d4fa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Turn 1:\n","Turn 2:\n","Turn 3:\n","Turn 4:\n","Turn 5:\n"]}]},{"cell_type":"markdown","source":["#Using functions in your gameplay"],"metadata":{"id":"PEuOWsGXioAS"}},{"cell_type":"markdown","source":["We learned how to use functions not too long ago, these are extremely helpful in building code because they ensure that your code is reusable and efficient -- two key qualities of a good program!\n","\n","Let's package our simple number guessing game in a function. In this case, we basically do not need to change anything!  "],"metadata":{"id":"yxkJ14IOirzx"}},{"cell_type":"code","source":["import random\n","\n","def number_guesser():\n","  tries = 3\n","  number = random.randint(1,10)\n","\n","  while tries != 0:\n","    answer = int(input(\"What number am I thinking of 1-10? \"))\n","    if answer != number:\n","\n","      tries -= 1\n","      print(f\"Wrong! Try again. You have {tries} tries left.\")\n","    else:\n","      print(\"Correct! You win!\")\n","      break\n","\n","number_guesser()"],"metadata":{"id":"qERWIF-Ji-hF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666894435450,"user_tz":240,"elapsed":25189,"user":{"displayName":"Bing Codes","userId":"17330647075205038069"}},"outputId":"b3d9b5a3-4f41-462a-eb80-9a5c99b63e12"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["What number am I thinking of 1-10? 1\n","Wrong! Try again. You have 2 tries left.\n","What number am I thinking of 1-10? 2\n","Wrong! Try again. You have 1 tries left.\n","What number am I thinking of 1-10? 4\n","Wrong! Try again. You have 0 tries left.\n"]}]},{"cell_type":"markdown","source":["We could then call that function in the middle of a game play. Let's say we're creating a text game that has little puzzles you need to solve in order to win the game. Let's wrap all of this in a function too!"],"metadata":{"id":"IzVkh9Rdo7BP"}},{"cell_type":"code","source":["def room_of_games():\n","  user = input((\"You've just entered the ROOM OF GAMES. Are you ready to play? (y/n) \"))\n","  while user.lower() == \"y\":\n","    print(\"ROOM ONE: Ok, you've got to correctly guess a number in order to move to the next room!\")\n","    number_guesser()\n","\n","    user = input((\"Are you ready to continue the MAZE OF GAMES? (y/n) \"))\n","\n","\n","room_of_games()\n"],"metadata":{"id":"-2bNzlRNpB_B"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Why don't you try creating a few more games using functions, and plug that into our larger room_of_games function?\n","\n","Need some ideas? Try this game idea generator:"],"metadata":{"id":"5pEetuKFs8a7"}},{"cell_type":"code","source":["import random\n","\n","def game_ideas():\n","  techniques = [\"while loop\", \"random choice generator\", \"dictionary\", \"list\",\n","                \"for loop\", \"input()\", \"add()\", \"booleans\", \"function\",\n","                \"sleep()\", \"try/except clause\", \"conditionals\", \"conditional operators\"]\n","\n","  theme = [\"halloween\", \"BU campus\", \"internet memes\", \"library\", \"London\", \"fall\"]\n","\n","  game_type = [\"dating game\", \"text game\", \"fighting game\", \"matching game\",\n","               \"codebreaker\", \"computer vs human\", \"escape room\", \"RPG\", \"points based game\"]\n","\n","  tech_result = random.sample(techniques, 2)\n","  theme_result = random.choice(theme).upper()\n","  game_result = random.choice(game_type).upper()\n","\n","  print(f\"Why don't you try a {game_result} game with a theme of {theme_result} and these two techniques: {tech_result}.\")\n","\n","\n","game_ideas()"],"metadata":{"id":"axsqDqV5-fY0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Combining OOP (classes and objects) with these\n","\n","1.   List item\n","2.   List item\n","\n","modules, loops, and functions, you can easily build a relatively complex game! Be creative!"],"metadata":{"id":"C0nsS2S2sj2K"}}]}